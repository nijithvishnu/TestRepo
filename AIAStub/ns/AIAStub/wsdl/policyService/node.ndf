<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">webServiceDescriptor</value>
  <value name="node_subtype">unknown</value>
  <value name="node_nsName">AIAStub.wsdl:policyService</value>
  <value name="node_pkg">AIAStub</value>
  <value name="is_public">false</value>
  <Boolean name="inbound">true</Boolean>
  <Boolean name="WSICompliant">false</Boolean>
  <value name="SOAPProtocol">SOAP 1.1 Protocol</value>
  <value name="targetNamespace">http://schemas.discovery.co.za/vitality</value>
  <Boolean name="attachmentEnabled">false</Boolean>
  <number name="mtomThreshold" type="Integer">0</number>
  <array name="externalWSDLSources" type="record" depth="1">
    <record javaclass="com.wm.util.Values">
      <value name="contextURI">http://localhost:5555/</value>
      <value name="locationURI">AIAStub.wsdl.policyService?wsdl=wsdl0</value>
      <byte name="source">
      </byte>
      <number name="type" type="Integer">1</number>
    </record>
  </array>
  <value name="externalWSDLURL">file:/C:/Users/nivi/Desktop/AIA Vitality/Processing Services WSDLs/policyService.wsdl</value>
  <value name="WSDLURL">http://SAG-BXQMXT2.eur.ad.sag:5555/ws/PolicyManager:policyService?WSDL</value>
  <value name="definitionName">policyService</value>
  <value name="version">V_10_3</value>
  <value name="schemaDomain">8aa54a5b9165ef7316dfd4410fb</value>
  <Boolean name="rawArray">true</Boolean>
  <array name="handlerList" type="record" depth="1">
  </array>
  <array name="binderList" type="record" depth="1">
    <record javaclass="com.wm.util.Values">
      <value name="binderName">PolicyManagerSoap11</value>
      <value name="bindingName">PolicyManagerSoap11</value>
      <value name="bindingStyle">document</value>
      <value name="bindingUse">literal</value>
      <value name="bindingType">SOAP</value>
      <value name="portName">PolicyManagerSoap11</value>
      <value name="portTypeName">PolicyManager</value>
      <value name="bindingTransport">http://schemas.xmlsoap.org/soap/http</value>
      <value name="transportType">http</value>
      <record name="operationMap" javaclass="com.wm.util.Values">
        <value name="">GetPolicyStatistics</value>
        <value name="">DeletePolicy</value>
        <value name="">GetGroups</value>
        <value name="">GetPolicyNumber</value>
        <value name="">ViewGroups</value>
        <value name="">UpdatePolicy</value>
        <value name="">GetPolicy</value>
        <value name="">GetPolicyFormulaPeriods</value>
        <value name="">GetMembersOnPolicy</value>
        <value name="">GetPolicyProductVersion</value>
        <value name="">GetPolicyPlan</value>
        <value name="">GetMemberPolicyHistory</value>
        <value name="">RecreatePolicy</value>
        <value name="">GetProgramPeriod</value>
        <value name="">GetPolicyStatisticsWithEventCapturer</value>
        <value name="">SpecialReinstatement</value>
        <value name="">GetPolicyPeriod</value>
        <value name="">GetPolicyGroups</value>
        <value name="">CreatePolicy</value>
        <value name="">UndeletePolicy</value>
      </record>
      <value name="SOAPProtocol">SOAP 1.1 Protocol</value>
      <value name="SOAPDirective">ws</value>
      <Boolean name="useCSQ">false</Boolean>
    </record>
  </array>
  <array name="operationList" type="record" depth="1">
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyStatistics</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyStatistics</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyStatistics_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatistics_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatistics_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyStatistics_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatistics_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatistics_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">DeletePolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:DeletePolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_DeletePolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_DeletePolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_DeletePolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_DeletePolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_DeletePolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_DeletePolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetGroups</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetGroups</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetGroups_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetGroups_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetGroups_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetGroups_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetGroups_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetGroups_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyNumber</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyNumber</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyNumber_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyNumber_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyNumber_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyNumber_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyNumber_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyNumber_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">ViewGroups</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:ViewGroups</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_ViewGroups_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_ViewGroups_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_ViewGroups_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_ViewGroups_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_ViewGroups_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_ViewGroups_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">UpdatePolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:UpdatePolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_UpdatePolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UpdatePolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UpdatePolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_UpdatePolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UpdatePolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UpdatePolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyFormulaPeriods</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyFormulaPeriods</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyFormulaPeriods_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyFormulaPeriods_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyFormulaPeriods_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyFormulaPeriods_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyFormulaPeriods_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyFormulaPeriods_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetMembersOnPolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetMembersOnPolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetMembersOnPolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMembersOnPolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMembersOnPolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetMembersOnPolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMembersOnPolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMembersOnPolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyProductVersion</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyProductVersion</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyProductVersion_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyProductVersion_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyProductVersion_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyProductVersion_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyProductVersion_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyProductVersion_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyPlan</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyPlan</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyPlan_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPlan_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPlan_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyPlan_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPlan_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPlan_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetMemberPolicyHistory</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetMemberPolicyHistory</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetMemberPolicyHistory_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMemberPolicyHistory_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMemberPolicyHistory_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetMemberPolicyHistory_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMemberPolicyHistory_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetMemberPolicyHistory_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">RecreatePolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:RecreatePolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_RecreatePolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_RecreatePolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_RecreatePolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_RecreatePolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_RecreatePolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_RecreatePolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetProgramPeriod</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetProgramPeriod</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetProgramPeriod_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetProgramPeriod_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetProgramPeriod_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetProgramPeriod_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetProgramPeriod_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetProgramPeriod_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyStatisticsWithEventCapturer</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyStatisticsWithEventCapturer</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyStatisticsWithEventCapturer_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatisticsWithEventCapturer_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatisticsWithEventCapturer_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyStatisticsWithEventCapturer_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatisticsWithEventCapturer_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyStatisticsWithEventCapturer_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">SpecialReinstatement</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:SpecialReinstatement</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_SpecialReinstatement_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_SpecialReinstatement_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_SpecialReinstatement_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_SpecialReinstatement_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_SpecialReinstatement_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_SpecialReinstatement_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyPeriod</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyPeriod</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyPeriod_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPeriod_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPeriod_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyPeriod_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPeriod_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyPeriod_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">GetPolicyGroups</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:GetPolicyGroups</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyGroups_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyGroups_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyGroups_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_GetPolicyGroups_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyGroups_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_GetPolicyGroups_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">CreatePolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:CreatePolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_CreatePolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_CreatePolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_CreatePolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_CreatePolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_CreatePolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_CreatePolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
    <record javaclass="com.wm.util.Values">
      <value name="operationName">UndeletePolicy</value>
      <value name="serviceName">AIAStub.wsdl.policyService_.services:UndeletePolicy</value>
      <value name="originalMEPType">MEP_URI_IN_OUT</value>
      <record name="requestElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_UndeletePolicy_Input</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UndeletePolicy_Input</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UndeletePolicy_Input</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
      <record name="responseElement" javaclass="com.wm.util.Values">
        <array name="headers" type="record" depth="1">
        </array>
        <record name="body" javaclass="com.wm.util.Values">
          <value name="name">http://schemas.discovery.co.za/vitality:PolicyManager_UndeletePolicy_Output</value>
          <value name="docType">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UndeletePolicy_Output</value>
          <value name="nsOwner">AIAStub.wsdl.policyService_.docTypes:PolicyManager_UndeletePolicy_Output</value>
          <number name="nsOwnerType" type="Integer">3</number>
          <Boolean name="addedByClient">false</Boolean>
          <null name="originalDocName"/>
        </record>
        <array name="faults" type="record" depth="1">
        </array>
      </record>
    </record>
  </array>
  <record name="namespaces" javaclass="com.wm.util.Values">
    <value name="sch19">http://schemas.discovery.co.za/vitality</value>
    <value name="wsdl">http://schemas.xmlsoap.org/wsdl/</value>
    <value name="sch21">http://schemas.discovery.co.za/vitality</value>
    <value name="sch9">http://schemas.discovery.co.za/vitality</value>
    <value name="sch20">http://schemas.discovery.co.za/vitality</value>
    <value name="sch8">http://schemas.discovery.co.za/vitality</value>
    <value name="sch25">http://schemas.discovery.co.za/vitality</value>
    <value name="sch24">http://schemas.discovery.co.za/vitality</value>
    <value name="sch23">http://schemas.discovery.co.za/vitality</value>
    <value name="sch22">http://schemas.discovery.co.za/vitality</value>
    <value name="sch29">http://schemas.discovery.co.za/vitality</value>
    <value name="sch28">http://schemas.discovery.co.za/vitality</value>
    <value name="sch27">http://schemas.discovery.co.za/vitality</value>
    <value name="sch26">http://schemas.discovery.co.za/vitality</value>
    <value name="sch5">http://schemas.discovery.co.za/vitality</value>
    <value name="sch4">http://schemas.discovery.co.za/vitality</value>
    <value name="sch7">http://schemas.discovery.co.za/vitality</value>
    <value name="sch6">http://schemas.discovery.co.za/vitality</value>
    <value name="sch1">http://schemas.discovery.co.za/vitality</value>
    <value name="sch0">http://schemas.discovery.co.za/vitality</value>
    <value name="sch3">http://schemas.discovery.co.za/vitality</value>
    <value name="sch2">http://schemas.discovery.co.za/vitality</value>
    <value name="sch10">http://schemas.discovery.co.za/vitality</value>
    <value name="sch32">http://schemas.discovery.co.za/vitality</value>
    <value name="sch31">http://schemas.discovery.co.za/vitality</value>
    <value name="sch30">http://schemas.discovery.co.za/vitality</value>
    <value name="sch14">http://schemas.discovery.co.za/vitality</value>
    <value name="sch36">http://schemas.discovery.co.za/vitality</value>
    <value name="tns">http://schemas.discovery.co.za/vitality</value>
    <value name="sch13">http://schemas.discovery.co.za/vitality</value>
    <value name="sch35">http://schemas.discovery.co.za/vitality</value>
    <value name="sch12">http://schemas.discovery.co.za/vitality</value>
    <value name="sch34">http://schemas.discovery.co.za/vitality</value>
    <value name="sch11">http://schemas.discovery.co.za/vitality</value>
    <value name="sch33">http://schemas.discovery.co.za/vitality</value>
    <value name="sch18">http://schemas.discovery.co.za/vitality</value>
    <value name="sch17">http://schemas.discovery.co.za/vitality</value>
    <value name="sch39">http://schemas.discovery.co.za/vitality</value>
    <value name="sch16">http://schemas.discovery.co.za/vitality</value>
    <value name="sch38">http://schemas.discovery.co.za/vitality</value>
    <value name="soap">http://schemas.xmlsoap.org/wsdl/soap/</value>
    <value name="sch15">http://schemas.discovery.co.za/vitality</value>
    <value name="sch37">http://schemas.discovery.co.za/vitality</value>
  </record>
  <Boolean name="HeadersInPipelineEnabled">false</Boolean>
  <Boolean name="validateSOAPResponse">true</Boolean>
  <Boolean name="validateSchemaUsingXerces">false</Boolean>
  <Boolean name="enableCompatibility">false</Boolean>
  <Boolean name="omitXSDAny">true</Boolean>
  <record name="userDefinedURIReferencePrefixes" javaclass="com.wm.util.Values">
    <value name="http://schemas.discovery.co.za/vitality">sch19</value>
  </record>
  <Boolean name="registerDoctypes">true</Boolean>
  <Boolean name="allTypes">false</Boolean>
  <Boolean name="generateXOPObjectForBase64Binary">false</Boolean>
  <value name="originURI">file://C:\Users\nivi\Desktop\AIA Vitality\Processing Services WSDLs\policyService.wsdl</value>
  <value name="modifiable">false</value>
  <value name="externalServiceName">{http://schemas.discovery.co.za/vitality}PolicyManagerService</value>
  <null name="policyAttachmentList"/>
  <Boolean name="filterLoginCredentials">false</Boolean>
</Values>
